{"version":3,"sources":["Header.tsx","App.tsx","StyledApp.tsx","serviceWorker.ts","index.tsx"],"names":["getBannersData","oneLineHeaderData","className","headerText","twoLineHeaderData","replace","Promise","all","map","_ref2","_ref","text","font","resolve","reject","lowerCaseText","toLowerCase","figlet","err","bannerText","getBannerText","then","Banner","_ref3","lines","split","numColumns","Object","slicedToArray","length","underline","Array","fill","join","react_default","a","createElement","role","aria-level","aria-label","Header","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","banners","setBanners","bind","assertThisInitialized","_this2","setState","catch","console","error","classnames","_ref4","Header_Banner","key","React","Component","StyledHeader","styled","withConfig","displayName","componentId","Layout","children","StyledIcon","iconClassName","App","_ref5","App_Layout","src_Header","linkElements","handlePrefix","handle","urlBase","title","concat","href","target","rel","getLinks","StyledApp","tinycolor","toHex","brighten","Boolean","window","location","hostname","match","ReactDOM","render","src_StyledApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ddddf44.chunk.js","sourcesContent":["import React from \"react\";\nimport figlet from \"figlet\";\nimport styled from \"styled-components\";\nimport classnames from \"classnames\";\n\nconst fontName = \"Calvin S\";\nconst headerText = \"Armand Adroher\";\n\ntype getBannerText = (args: {\n  text: string;\n  font?: figlet.Fonts;\n}) => Promise<string>;\nconst getBannerText: getBannerText = ({ text, font }) =>\n  new Promise((resolve: Function, reject: Function) => {\n    const lowerCaseText = text.toLowerCase();\n    figlet(lowerCaseText, { font }, (err, bannerText) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(bannerText);\n      }\n    });\n  });\n\ninterface BannerData {\n  className?: string;\n  bannerText?: string;\n}\n\ntype getBannersData = () => Promise<BannerData[]>;\nconst getBannersData = () => {\n  const oneLineHeaderData = {\n    className: \"desktop\",\n    headerText\n  };\n  const twoLineHeaderData = {\n    className: \"mobile\",\n    headerText: headerText.replace(\" \", \"\\n\")\n  };\n  return Promise.all(\n    [oneLineHeaderData, twoLineHeaderData].map(({ className, headerText }) =>\n      getBannerText({ text: headerText, font: fontName }).then(bannerText => ({\n        className,\n        bannerText\n      }))\n    )\n  );\n};\n\ntype Banner = React.FunctionComponent<{\n  key?: string;\n  className?: string;\n  text?: string;\n}>;\n\nconst Banner: Banner = ({ className, text }) => {\n  const lines = (text || \"\").split(\"\\n\");\n  const [firstLine] = lines;\n  const numColumns = firstLine.length;\n  const underline = new Array(numColumns).fill(\"=\").join(\"\");\n  return (\n    <pre\n      className={className}\n      role=\"heading\"\n      aria-level={1}\n      aria-label={headerText}\n    >\n      {text}\n      <br />\n      {underline}\n    </pre>\n  );\n};\n\ninterface HeaderProps {\n  fontName?: string;\n  className?: string;\n}\n\nclass Header extends React.Component<HeaderProps> {\n  state: {\n    banners: BannerData[];\n  };\n\n  constructor(props: HeaderProps) {\n    super(props);\n    this.state = { banners: [] };\n    this.setBanners = this.setBanners.bind(this);\n  }\n\n  componentDidMount() {\n    this.setBanners();\n  }\n\n  setBanners() {\n    getBannersData()\n      .then(banners => {\n        this.setState({ banners });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  render() {\n    const { className } = this.props;\n    const { banners } = this.state;\n\n    return (\n      <div className={classnames(\"header\", className)}>\n        {banners.map(({ className, bannerText }) => (\n          <Banner key={bannerText} className={className} text={bannerText} />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst StyledHeader = styled(Header)`\n  font-weight: 900;\n\n  .desktop {\n    display: block;\n  }\n  .mobile {\n    display: none;\n  }\n\n  @media (max-width: 27rem) {\n    .desktop {\n      display: none;\n    }\n\n    .mobile {\n      display: block;\n    }\n  }\n`;\n\nexport default StyledHeader;\n","import React, { ReactText } from \"react\";\nimport styled from \"styled-components\";\nimport classnames from \"classnames\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"@fortawesome/fontawesome-free/css/brands.css\";\n\nimport \"./assets/fira.css\";\nimport Header from \"./Header\";\n\ninterface LayoutProps {\n  className?: string;\n  children?: React.ReactElement<any>[];\n}\ntype Layout = React.FunctionComponent<LayoutProps>;\nconst Layout: Layout = ({ className, children }) => (\n  <div className={classnames(\"main-container\", className)}>{children}</div>\n);\n\ninterface IconProps {\n  iconClassName: string;\n  className?: string;\n}\ntype Icon = React.FunctionComponent<IconProps>;\nconst Icon: Icon = ({ iconClassName, className }) => (\n  <i className={classnames(\"fab\", iconClassName, className)} />\n);\n\nconst StyledIcon = styled(Icon)`\n  /* font-size: 100%; */\n  margin-right: 0.6rem;\n  min-width: 1rem;\n  text-align: center;\n`;\n\nconst getLinks = () => {\n  const links = [\n    [\"fa-twitter\", \"@\", \"aadroher\", \"twitter.com\", \"Twitter\"],\n    [\"fa-github-alt\", \"\", \"aadroher\", \"github.com\", \"Github\"],\n    [\"fa-facebook-f\", \"/\", \"aadroher\", \"www.facebook.com\", \"Facebook\"],\n    [\"fa-linkedin-in\", \"\", \"armandadroher\", \"www.linkedin.com/in\", \"LinkedIn\"]\n  ];\n\n  const linkElements = links.map(\n    ([iconClassName, handlePrefix, handle, urlBase, title]) => (\n      <li key={`${urlBase}/${handle}`}>\n        <a\n          href={`https://${urlBase}/${handle}`}\n          target=\"__blank\"\n          rel=\"external\"\n          aria-label={`${title} profile`}\n        >\n          <StyledIcon iconClassName={iconClassName} />\n          {`${handlePrefix}${handle}`}\n        </a>\n      </li>\n    )\n  );\n\n  return <ul>{linkElements}</ul>;\n};\n\ntype App = React.FunctionComponent<{\n  className?: string;\n}>;\nconst App: App = ({ className }) => (\n  <div className={classnames(\"app\", className)}>\n    <Layout>\n      <Header />\n      {getLinks()}\n    </Layout>\n  </div>\n);\n\nexport default App;\n","import styled, { keyframes } from \"styled-components\";\nimport tinycolor from \"tinycolor2\";\nimport App from \"./App\";\n\nconst fontColour = \"violet\";\nconst shadowBrighteningPercentage = 10;\nconst shadowRadius = 0.3; // in rem.\n\nconst StyledApp = styled(App)`\n  padding: 8px;\n  background-color: #0f0f0f;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n\n  font-family: \"Fira Mono\";\n  font-size: 16px;\n  color: #${tinycolor(fontColour).toHex()};\n  text-shadow: #${tinycolor(fontColour)\n      .brighten(shadowBrighteningPercentage)\n      .toHex()} 0 0 ${shadowRadius}rem;\n\n  a {\n    color: inherit;\n    animation: inherit;\n  }\n\n  & > .main-container {\n    width: 30rem;\n    @media (max-width: 27rem) {\n      width: 15rem;\n    }\n    margin-left: auto;\n    margin-right: auto;\n    position: relative;\n    top: 40%;\n    transform: translateY(-50%);\n\n    padding: 2rem;\n\n    ul {\n      li {\n        list-style-type: none;\n        a {\n          text-decoration: none;\n          &:hover {\n            text-decoration: underline;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default StyledApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport StyledApp from \"./StyledApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<StyledApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}